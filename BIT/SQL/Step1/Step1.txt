cmd 시작>>>>>>

sqlplus

scott
tiger
(커넥트를 볼 수 있다)

★--의 뜻은 //와 같다고 보면 된다★

--create table 테이블 {
필드명 타입,....)

CREATE TABLE BOOK (
   bookid            NUMBER(2)  PRIMARY KEY,
   bookname        VARCHAR2(40),
   publisher          VARCHAR2(40),
   price               NUMBER(8)
);


--테이블 구조 : desc (describe)
desc book;


--spool (show spool) -> ON이라고 나오면 작동하는것
> spool 파일명
(C드라이브에 temp 폴더 하나 만들기)
> spool c:\temp\db02_11.txt

--spool 해제
spool off

--customer
CREATE TABLE Customer (
   custid           NUMBER(2) PRIMARY KEY,
   name           VARCHAR2(40),
   address         VARCHAR2(50),
   phone          VARCHAR2(20)
);

desc customer;

--table 보기
select table_name
from user_tables;


****************
set linesize 280
set pagesize 30
****************


--orders
CREATE TABLE Orders (
   orderid     NUMBER(2)  PRIMARY KEY,
   custid       NUMBER(2)  REFERENCES Customer(custid),
   bookid      NUMBER(2)  REFERENCES Book(bookid),
   saleprice    NUMBER(8),
   orderadate DATE
);


--data 입력 : 부모 부터
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단체별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);


--table 전체데이터 보기
select * from 테이블;
select * from book;

--bookname만 보기
select bookname from book;

--disk 에 반영(저장)
commit;

--rollback;    커밋한거 되돌리기

--customer
INSERT INTO Customer VALUES(1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO Customer VALUES(2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO Customer VALUES(3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES(4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES(5, '박세리', '대한민국 대전', NULL);

select * from customer;

--orders
--날짜 데이터 입력시 : to_date(' ~~', 'yyyy-mm-dd');

insert into orders values('2022/02/11');

INSERT INTO Orders VALUES(1, 1, 1, 6000, TO_DATE('2014-07-01', 'yyyy-mm-dd'));
INSERT INTO Orders VALUES(2, 1, 3, 21000, TO_DATE('2014-07-03', 'yyyy-mm-dd'));
INSERT INTO Orders VALUES(3, 2, 5, 8000, TO_DATE('2014-07-03', 'yyyy-mm-dd'));
INSERT INTO Orders VALUES(4, 3, 6, 6000, TO_DATE('2014-07-04', 'yyyy-mm-dd'));
INSERT INTO Orders VALUES(5, 4, 7, 20000, TO_DATE('2014-07-05', 'yyyy-mm-dd'));


-------------------------------해보지 못함---------
--필드 타입 변경
alter table 테이름
modify 필드명 타입;

alter customer
modify phone varchar2(15);
----------------------------------------------------------

INSERT INTO Orders VALUES (6, 1, 2, 12000, TO_DATE('2014-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, TO_DATE( '2014-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, TO_DATE('2014-07-08','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (9, 2, 10, 7000, TO_DATE('2014-07-09','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (10, 3, 8, 13000, TO_DATE('2014-07-10','yyyy-mm-dd'));

select * from orders;

commit;



> spool c:\temp\db02_12.txt
exit를 하고 나간 다음엔 
show spool을 해서 켜주는게 좋다.
exit를 하기 전에 
spool off해서 써주는게 좋다.

아래는 참고로 다 소문자로 써도 나온다.
--3-1. 모든 도서의 이름과 가격을 검색하시오.
SELECT bookname, price
FROM Book;

--3-1 변형) 모든 도서의 가격과 이름을 검색하시오.
SELECT price, bookname
FROM  Book;

--3-2 모든 도서의 도서번호, 도서이름, 출판사, 가격을 검색하시오
SELECT bookid, bookname, publisher, price
FROM  Book;

SELECT *
FROM  Book;

--3-3 도서 테이블에 있는 모든 출판사를 검색하시오.
SELECT publisher
FROM  Book;

변형) 중복을 제거하고 싶으면 DISTINCT라는 키워드를 사용한다.
SELECT DISTINCT publisher
FROM Book;

--3-4 가격이 20,000원 미만인 도서를 검색하시오.
SELECT *
FROM  Book
WHERE price < 20000;

--3-5 가격이 10,000원 이상 20,000 이하인 도서를 검색하시오.
SELECT *
FROM Book
WHERE price BETWEEN 10000 AND 20000;

변형) BETWEEN은 논리 연산자인 AND를 사용할 수 있다.
SELECT * 
FROM Book
WHERE price >= 10000 AND price <= 20000;

--3-6 출판사가 '굿스포츠' 혹은 '대한미디어'인 도서를 검색하시오.
SELECT *
FROM Book
WHERE publisher IN('굿스포츠', '대한미디어');
(IN연산자는 or이라는 뜻이 있다)

변형) 출판사가 '굿스포츠' 혹은 '대한미디어'가 아닌 도서를 검색하시오.
SELECT *
FROM Book
WHERE publisher NOT IN ('굿스포츠', '대한미디어');

--3-7 '축구의 역사'를 출간한 출판사를 검색하시오.
SELECT bookname, publisher
FROM Book
WHERE bookname LIKE '축구의 역사';

--3-8 도서이름에 '축구 '가 포함된 출판사를 검색하시오.
SELECT bookname
from book
where bookname like '%축구%';

--3-8-2 도서이름에 '축구가 포함되지 않는 도서이름을 검색하시오.
select bookname
from book
where bookname not like '%축구%';

--3-9 도서이름의 왼쪽 두 번째 위치에 '구'라는 문자열을 갖는 도서를 검색하시오.
SELECT *
FROM Book
WHERE bookname LIKE '_구%';

--3-10 축구에 관한 도서 중 가격이 20,000원 이상인 도서를 검색하시오.
SELECT *
FROM Book
WHERE bookname LIKE '%축구%' AND price >= 20000;

--3-11 출판사가 '굿스포츠' 혹은 '대한미디어'인 도서를 검색하시오.
SELECT *
FROM Book
WHERE publisher='굿스포츠' OR publisher='대한미디어';

--3-12 도서를 이름순으로 검색하시오.
SELECT *
FROM Book
ORDER BY bookname;

--3-13 도서를 가격순으로 검색하고, 가격이 같으면 이름순으로 검색하시오.
SELECT *
FROM Book
ORDER BY price, bookname;
(ORDER BY 뒤에 아무것도 안쓰면 오름차순(ASC)이다)

--3-14 도서를 가격의 내림차순으로 검색하시오. 만약 가격이 같다면 출판사의 오름찬순으로 검색한다.
SELECT *
FROM Book
ORDER BY price DESC, publisher ASC;

--3-15 고객이 주문한 도서의 총 판매액을 구하시오.
SELECT SUM(saleprice)
FROM Orders;

참고) 의미 있는 열 이름을 출력하고 싶으면 속성이름의 별칭을 지칭하는 AS키워드를 사용하여 열 이름을 부여한다.
SELECT SUM(saleprice) AS 총매출         ※AS는 alias를 뜻한다 / 총매출에 '를 넣어도 된다.
FROM Orders;

--3-16 2번 김연아 고객이 주문한 도서의 총 판매액을 구하시오.
SELECT SUM(saleprice) AS 총매출
FROM Orders
WHERE custid=2;

--3-17 고객이 주문한 도서의 총 판매액, 평균값, 최저가, 최저가를 구하시오.
SELECT SUM(saleprice) AS Total,
          AVG(saleprice) AS Average,
          MIN(saleprice) AS Minimun,
          MAX(saleprice) AS Maximum
FROM Orders;
(SUM, AVG, MIN, MAX, COUNT > 집계함수)

--3-18 마당서점의 도서 판매 건수를 구하시오.
SELECT COUNT(*)
FROM Orders;

--3-18-1 마당 서점에 납품하는 출판사 이름을 검색하시오.(중복 제거)

--3-18-2 마당 서점에 납품하는 출판사 수를 검색하시오.
select count(distinct publisher)
from book;

--3-19 고객별로 주문한 도서의 총 수량과 총 판매액을 구하시오.
SELECT custid, COUNT(*) AS 도서수량, SUM(saleprice) AS 총액
FROM  Orders
GROUP BY  custid;             ※그룹바이 뒤에 사용한 것들만 셀랙트 문에 사용할 수 있다. 

--3-20 가격이 8,000원 이상인 도서를 구매한 고객에 대하여 고객별 주문 도서의 총 수량을 구하시오.
( 단, 두 권 이상 구매한 고객만 구한다.)
SELECT custid, COUNT(*) AS 도서수량
FROM Orders
WHERE saleprice >= 8000
GROUP BY custid
HAVING count(*) >= 2;

--3-20-1  주문 날짜별로 총 판매액과 책의 수량을 검색하시오.
select orderdate, count(*), sum(saleprice)
from orders
group by orderdate;


※-----------------------------------------------------※
1. 다음 질문에 대해 SQL 문을 작성하시오.
(1) 도서번호가 1인 도서의 이름
select bookname from book where bookid=1;
(2) 가격이 20,000원 이상인 도서의 이름
select bookname from book where price >= 20000;


2. 다음 질문에 대해 SQL 문을 작성하시오.
(1) 마당서점 도서의 총 개수
select count(*) from book;
(2) 마당서점에 도서를 출고하는 출판사의 총 개수
select count(distinct publisher) from book;
(3) 모든 고객의 이름, 주소
select name, address from customer;
(4) 2014년 7월 4일 ~ 7월 7일 사이에 주문받은 도서의 주문번호
select * from orders where orderdate BETWEEN '20140704' AND '20140707';
(5) 성이 '김'씨인 고객의 이름과 주소
select name, address from customer where name Like '김%';
(6) 성이 '김'씨이고 이름이 '아'로 끝나는 고객의 이름과 주소
select name, address from customer where name like '김%아';









